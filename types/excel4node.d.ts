declare module 'excel4node'{
  class Worksheet {
    constructor(wb: Workbook, name?: string, opts: Object = {});
     /**
     * @func Worksheet.addConditionalFormattingRule
     * @param {String} sqref Text represetation of Cell range where the conditional formatting will take effect
     * @param {Object} options Options for conditional formatting
     * @param {String} options.type Type of conditional formatting
     * @param {String} options.priority Priority level for this rule
     * @param {String} options.formula Formula that returns nonzero or 0 value. If not 0 then rule will be applied
     * @param {Style} options.style Style that should be applied if rule passes
     * @returns {Worksheet}
     */
    addConditionalFormattingRule(sqref: string, options: Object): Worksheet;
    /**
     * Module repesenting a Cell Accessor
     * @alias Worksheet.cell
     * @namespace
     * @func Worksheet.cell
     * @desc Access a range of cells in order to manipulate values
     * @param {Number} row1 Row of top left cell
     * @param {Number} col1 Column of top left cell
     * @param {Number} row2 Row of bottom right cell (optional)
     * @param {Number} col2 Column of bottom right cell (optional)
     * @param {Boolean} isMerged Merged the cell range into a single cell
     * @returns {cellBlock}
     */
    cell(row1: number, col1: number, row?: number, col2?: number, isMerged?: boolean): {
      string(name: string): {
        style(styleConfig: any): any;
      };
      link(url: string, displayStr?: string, tooltip?: string): {
        style(styleConfig: any): any;
      };
    };
    /**
     * @method Worksheet.addPrintArea
     * @param {number} startRow 
     * @param {number} startCol 
     * @param {number} endRow 
     * @param {number} endCol 
     * @returns {Worksheet}
     */
    setPrintArea(startRow: number, startCol: number, endRow: number, endCol: number): Worksheet;

  }

  class Workbook {
    constructor(ops: Object = {}): Workbook;
    /**
     * setSelectedTab
     * @param {Number} id number of sheet that should be displayed when workbook opens. tabs are indexed starting with 1
     **/
    setSelectedTab(id: number): void;
    /**
     * writeToBuffer
     * Writes Excel data to a node Buffer.
    */
    writeToBuffer(): Promise;
    /**
    * Generate .xlsx file.
    * @param {String} fileName Name of Excel workbook with .xslx extension
    * @param {http.response | callback} http response object or callback function (optional).
    * If http response object is given, file is written to http response. Useful for web applications.
    * If callback is given, callback called with (err, fs.Stats) passed
    */
    write(fileName: string, response: any): any;
    /**
     * Add a worksheet to the Workbook
     * @param {String} name Name of the Worksheet
     * @param {Object} opts Options for Worksheet. See Worksheet class definition
     * @returns {Worksheet}
     */
    addWorksheet(name: string, opts?: Object): Worksheet;
    /**
     * Add a Style to the Workbook
     * @param {Object} opts Options for the style. See Style class definition
     * @returns {Style}
     */
    createStyle(workbookStyle: {
      font?: {
        bold?: boolean;
        color?: string;
        size?: number;
      };
    }): any;
    /**
     * Gets the index of a string from the shared string array if exists and adds the string if it does not and returns the new index
     * @param {String} val Text of string
     * @returns {Number} index of the string in the shared strings array
     */
    getStringIndex(val: string): number;
    /**
     * @func Workbook._generateXML
     * @desc used for testing the Workbook XML generated by the builder
     * @return {Promise} resolves with Workbook XML 
     */
    _generateXML(): Promise;
  }

  function Workbook(): Workbook;
};